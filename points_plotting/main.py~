# main.py program from which functions are called

# libraries
import nibabel as nib
import scipy as sp
import numpy as np
import pandas as pd
#from PIL import Image
import matplotlib.pyplot as plt
import os
from sklearn.linear_model import LinearRegression

#user defined functions
from load_nifti import load_nifti
from polynomial_plot import create_polynomial_from_csv
from polynomial_plot import fit_poly
from symmetry_line import get_mirror_line
from symmetry_line import reflect_across_line
from save_variables import save_variables
#from extract_slice import extract_and_display_slice


poi_log_file_path='/home/cmb247/repos/FSL/points_plotting/points.csv'
baseline_poi_log_file_path='/home/cmb247/repos/FSL/points_plotting/baseline_points.csv'

poi_voxels_file_path='/home/cmb247/repos/FSL/points_plotting/points_voxel_coords.csv'
baseline_poi_voxels_file_path='/home/cmb247/repos/FSL/points_plotting/baseline_points_voxel_coords.csv'


nifti_file_path ='/home/cmb247/Desktop/Project_3/BET_Extractions/19978/T1w_time1_registered_scans/T1w_time1.T1w_verio_P00030_19978_acute_20111102_U-ID22791_registered.nii.gz'
 
img, save_directory = load_nifti(nifti_file_path)


# get the affine transformation matrix 
affine=img.affine

# Get image data
data = img.get_fdata()

## SELECT AND PLOT BASE SLICE

# Define the scanner (RAS, anatomical, imaging space) coordinates or voxel location
scanner_coords = np.array([2.641497, -2.877373, -12.73399,1])  
#voxel loc: 91 119 145

# Inverse affine to convert RAS/anatomical coords to voxel coords
inv_affine=np.linalg.inv(img.affine)

# convert RAS/anatomical coords to voxel coords
voxel_coords=inv_affine.dot(scanner_coords)[:3]

# Extract the axial slice at the z voxel index determined from the scanner coordinates
z_index=int(voxel_coords[2])
slice_data=data[:,:, z_index]

# plot the axial slice
plt.imshow(slice_data.T, cmap='gray', origin='lower')


## POLYNOMIAL AND MIRROR LINE FITTING FROM POI

# Deformed side
poly_func, x_values, y_values, xa_coords, ya_coords = create_polynomial_from_csv(poi_log_file_path, affine)

#Baseline side
polyb_func, xb_values, yb_values, xb_coords, yb_coords = create_polynomial_from_csv(baseline_poi_log_file_path, affine)

#Find mirrorline (average of first and last points in xa and xb respertively)
m, c, Y = get_mirror_line(yb_coords, xa_coords, xb_coords)
yl_values = np.linspace(Y[0]+50, Y[-1]-50, 100) #extend Y fit line
xl_values = m * yl_values + c # x values and y values for mirrorline plot

#Reflection of baseline side
xr_coords = reflect_across_line(m, c, xb_coords, yb_coords)
polyr_func, xr_values, yr_values=fit_poly(yb_coords, xr_coords)


# Plot the fitted polynomial curve
plt.plot(x_values, y_values, color='red', label='Deformed Polynomial')
plt.scatter(xa_coords, ya_coords, c='red', s=2) # plot expansion points
plt.scatter(xb_coords, yb_coords, c='r', s=2) # plot baseline points
plt.plot(xb_values, yb_values, color='red', label='Baseline Polynomial')
plt.plot(xl_values, yl_values, color='blue', label='Mirror') # plot mirror line
plt.scatter(xr_coords, yb_coords, color='blue', s=2) # plot mirrored points
plt.plot(xr_values, yr_values, color='blue', label='Mirrored fit polynomial')

# Save plot and show
save_path=os.path.join(save_directory, 'slice_plot.png')
print('Plot saved to '+ save_path)
plt.savefig(save_path)
plt.show()


"""
# Save data to files as string using user defined function

save_variables(poly_func, x_values, y_values, xa_coords, ya_coords, data_type='deformed_variable_data')
save_variables(polyb_func, xb_values, yb_values, xb_coords, yb_coords, data_type='baseline_variable_data')
save_variables(polyr_func, xr_values, yr_values, xr_coords, yb_coords, data_type='reflected_baseline_variable_data')

"""

# Save np arrays to to file

np.savez('data_readout/deformed_arrays.npz', poly_func=poly_func, x_values=x_values, y_values=y_values, xx_coords=xa_coords, yy_coords=ya_coords)
np.savez('data_readout/baseline_arrays.npz', poly_func=polyb_func, x_values=xb_values, y_values=yb_values, xx_coords=xb_coords, yy_coords=yb_coords)
np.savez('data_readout/reflected_baseline_arrays.npz', poly_func=polyr_func, x_values=xr_values, y_values=yr_values, xx_coords=xr_coords, yy_coords=yb_coords)

np.save('data_readout/deformed_poly_coefficients.npy', poly_func)
np.save('data_readout/baseline_poly_coefficients.npy', polyb_func)
np.save('data_readout/reflected_baseline_poly_coefficients.npy', polyr_func)












